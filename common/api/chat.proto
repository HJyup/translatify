syntax = "proto3";

option go_package = "github.com/HJyup/translatify/api";

package api;

// ChatService uses Conversation as the primary unit of a chat.
// Each Conversation holds two user IDs and a unique conversation_id.
// Messages belong to a conversation.
service ChatService {
  // CreateConversation creates a new conversation between two users.
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);

  // SendMessage sends a text message within an existing conversation.
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  // StreamMessages streams new messages for a given conversation.
  rpc StreamMessages(StreamMessagesRequest) returns (stream ChatMessage);

  // GetMessage retrieves a specific message by its message_id.
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse);

  // ListMessages retrieves a list of messages in a conversation.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);

  // ListConversations retrieves a list of conversations for a given user.
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);

  // GetConversation retrieves a specific conversation by its conversation_id.
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);
}

// Conversation represents a chat between two users.
message Conversation {
  // Unique identifier for the conversation.
  string conversation_id = 1;
  // One participant in the conversation.
  string username_a = 2;
  // The other participant in the conversation.
  string username_b = 3;
  // Unix timestamp when the conversation was created.
  int64 created_at = 4;
  // The language code of the original content (e.g., "en" for English).
  string source_language = 7;
  // The target language code for translation (e.g., "es" for Spanish).
  string target_language = 8;
}

// CreateConversationRequest starts a new conversation between two users.
message CreateConversationRequest {
  string username_a = 1;
  string username_b = 2;
  string source_language = 3;
  string target_language = 4;
}

// CreateConversationResponse returns the created Conversation.
message CreateConversationResponse {
  bool success = 1;
  string conversation_id = 2;
  string error = 3;
}

// SendMessageRequest sends a message in a conversation.
message SendMessageRequest {
  // Identifier for the conversation.
  string conversation_id = 1;
  // Identifier of the sender.
  string sender_username = 2;
  // Identifier of the receiver.
  string receiver_username = 3;
  // The text content of the message.
  string content = 4;
}

// SendMessageResponse returns the result of the SendMessage RPC.
message SendMessageResponse {
  bool success = 1;
  // Unique identifier for the message.
  string message_id = 2;
  string error = 3;
}

// ChatMessage represents a message in a conversation.
message ChatMessage {
  // Unique identifier for the message.
  string message_id = 1;
  // Identifier of the conversation to which this message belongs.
  string conversation_id = 2;
  // The sender's user ID.
  string sender_username = 3;
  // The receiver's user ID.
  string receiver_username = 4;
  // The original message content.
  string content = 5;
  // The translated content (if applicable).
  string translated_content = 6;
  // Unix timestamp when the message was created.
  int64 timestamp = 7;
  // Indicates whether translation has been applied.
  bool translated = 8;
}

// StreamMessagesRequest subscribes to new messages in a conversation.
message StreamMessagesRequest {
  // Identifier for the conversation.
  string conversation_id = 1;
}

// GetMessageRequest retrieves a specific message by its ID.
message GetMessageRequest {
  string message_id = 1;
}

// GetMessageResponse returns a single ChatMessage.
message GetMessageResponse {
  ChatMessage message = 1;
  string error = 2;
}

// ListMessagesRequest retrieves messages from a conversation with optional pagination.
message ListMessagesRequest {
  // Identifier for the conversation.
  string conversation_id = 1;
  // Filter to only include messages after a given timestamp.
  int64 since_timestamp = 2;
  // Maximum number of messages to return.
  int32 limit = 3;
  // Optional pagination token for fetching the next set of results.
  string page_token = 4;
}

// ListMessagesResponse returns a list of ChatMessages.
message ListMessagesResponse {
  // The list of messages in the conversation.
  repeated ChatMessage messages = 1;
  // A token that can be used to retrieve the next page of results.
  string next_page_token = 2;
  string error = 3;
}

// ListConversationsRequest retrieves conversations for a given user.
message ListConversationsRequest {
  // Identifier for the user.
  string username = 1;
}

// ListConversationsResponse returns a list of Conversations.
message ListConversationsResponse {
  // The list of conversations for the user.
  repeated Conversation conversations = 1;
  string error = 2;
}

// GetConversationRequest retrieves a specific conversation by its ID.
message GetConversationRequest {
  string conversation_id = 1;
}

// GetConversationResponse returns a single Conversation.
message GetConversationResponse {
  Conversation conversation = 1;
  string error = 2;
}